library(glamlasso)
glamlasso
library(glmnet)
glmnet
library(glamlasso)#
library(glmnet)#
#
# H-transform of an array A by a matrix X #
H<-function(Xv, Av){#
d <- dim(Av)#
M<-matrix(Av, nrow=d[1])#
XM<-Xv %*% M #
array(XM, c(nrow(XM), d[-1]))#
}#
#
# Rotation of an array A #
Rotate <- function(Av){#
d <- 1:length(dim(Av)) #
d1<- c(d[-1], d[1]) #
aperm(Av, d1)#
}#
#
# Rotated H-transform of an array A by a matrix X #
RH <- function(Xv, Av){Rotate(H(Xv, Av))}#
#
set.seed(1)#
#
#############size of example#
n1 <- 16#
n2 <- 16#
n3 <- 100#
n <- n1 * n2 * n3#
#
p1 <- 5#floor(n1/5)#
p2 <- 5#floor(n2/5)#
p3 <- floor(n3/5)#
p <- p1 * p2 * p3#
#
#size of design is:#
n * p * 8 / 1024^3#
#giga bytes#
#
##############Martins example#
#basis1 <- function(x) sapply(1:p1, function(k) sin(k*x))#
#basis2 <- function(x) sapply(1:p2, function(k) sin(k*x))#
#basis3 <- function(x) sapply(1:p3, function(k) sin(k*x))#
#
#x1 <- runif(n1)#
#x2 <- runif(n2)#
#x3 <- runif(n3)#
#
#X1 <- t(sapply(x1, basis1))#
#X2 <- t(sapply(x2, basis2))#
#X3 <- t(sapply(x3, basis3))#
#
# sparsitycoef <- 0.05#
# B <- array(rbinom(p,1,sparsitycoef),dim = c(p1,p2,p3))#
# if(sum(B)==0){#
# r<-sample(1:p1)[1]#
# c<-sample(1:p2)[1]#
# s<-sample(1:p3)[1]#
# B[r,c,s]<-1}#
#
##############Normal example #
n1 <- 100#
n2 <- 20#
n3 <- 20 #
n <- n1*n2*n3#
p1 <- 20#
p2 <- 5#
p3 <- 5#
p <- p1 * p2 * p3#
nzc <- p1 * p2 * p3#
#x = matrix(rnorm(n * p),n,p)#
X1 <- matrix(rnorm(n1 * p1,0,0.5),n1,p1) #
X2 <- matrix(rnorm(n2 * p2,0,0.5),n2,p2) #
X3 <- matrix(rnorm(n3 * p3,0,0.5),n3,p3) #
X <- kronecker(X3,kronecker(X2,X1))#
beta = rnorm(nzc) * rbinom(p,1,0.1)#
#f = x[,seq(nzc)]%*%beta#
#f = X %*% beta#
#mu = f#
#y=rnorm(n, mu)#
#system.time(fit <- glmnet(X,y,family="gaussian"))#
#plot(beta,type="p")#
#lines(fit$beta[,76],type="h",col="red") #
#
#############Simulate data#
E <- array(rnorm(n,0,0.1),dim=c(n1,n2,n3))#
Y <- RH(X3, RH(X2, RH(X1, array(beta,dim=c(p1,p2,p3))))) + E #
# system.time(fit <- glmnet(X,c(Y),family="gaussian"))#
# plot(beta,type="p")#
# lines(fit$beta[,70],type="h",col="red") #
#
# #############glmnet paper example#
# #We generated Gaussian data with N observations and p predictors, with each pair of predictors Xj, Xj0 having the same population correlation rho. We tried a number of combinations of N and p, with rho varying from zero to 0.95. The outcome values were generated by#
#
# rho <- 0.5#
# Sigma1 <- matrix(rho,p1,p1)#
# diag(Sigma1) <- rep(1,p1)#
# Sigma2 <- matrix(rho,p2,p2)#
# diag(Sigma2) <- rep(1,p2)#
# Sigma3 <- matrix(rho,p3,p3)#
# diag(Sigma3) <- rep(1,p3)#
# X1 <- mvrnorm(n1, rep(0,p1), Sigma1) #
# X2 <- mvrnorm(n2, rep(0,p2), Sigma2) #
# X3 <- mvrnorm(n3, rep(0,p3), Sigma3) #
# X <- kronecker(X3, kronecker(X2, X1))#
#
# beta1 <- (-1)^(1:p1)*exp(-2*((1:p1)-1)/20)#
# beta2 <- (-1)^(1:p2)*exp(-2*((1:p2)-1)/20)#
# beta3 <- (-1)^(1:p3)*exp(-2*((1:p3)-1)/20)#
# B <- array(kronecker(beta1, kronecker(beta2, beta3)),c(p1,p2,p3))#
#
# Z<-rnorm(n,0,1)#
# k<-1#
# Y <- X %*% c(B) + k*Z#
# #where and k is chosen so that the signal-to-noise ratio is 3.0. The coecients are constructed to have alternating signs and to be exponentially decreasing.#
# #############Simulate data#
# E<-array(rnorm(n,0,0.1),dim=c(n1,n2,n3))#
# Y <- RH(X3,RH(X2,RH(X1,B))) + E #
######################Standardize design... #
########### mean zero#
# meanX1i <- apply(X1,2, function(x) mean(x))#
# X1 <- t(t(X1)-meanX1i)  # normalize columns#
# meanX2i <- apply(X2,2, function(x) mean(x))#
# X2 <- t(t(X2)-meanX2i)  # normalize columns#
# meanX3i <- apply(X3,2, function(x) mean(x))#
# X3 <- t(t(X3)-meanX3i)  # normalize columns#
#
# ############ unit variance#
# M<-1#
# sqnormX1i <- apply(X1,2, function(x) sqrt(sum(x^2)))#
# X1 <- t(t(X1)/sqnormX1i)/M  # normalize columns#
# sqnormX2i <- apply(X2,2, function(x) sqrt(sum(x^2)))#
# X2 <- t(t(X2)/sqnormX2i)/M  # normalize columns#
# sqnormX3i <- apply(X3,2, function(x) sqrt(sum(x^2)))#
# X3 <- t(t(X3)/sqnormX3i)/M  # normalize columns#
#
############## maximal eigenvalue of XtX#
# alphamax <-max(kronecker(eigen(t(X1)%*%X1)$values,kronecker(eigen(t(X2)%*%X2)$values, eigen(t(X3)%*%X3)$values)))#
##########arrange data with decreasing number of obs #
Ytilde <- aperm(Y,c(3,2,1))#
Xtilde <- kronecker(X1, kronecker(X2, X3))#
X1tilde <- X3#
X2tilde <- X2#
X3tilde <- X1#
#
n1tilde <- dim(X1tilde)[1]#
n2tilde <- dim(X2tilde)[1]#
n3tilde <- dim(X3tilde)[1]#
#
p1tilde <- dim(X1tilde)[2]#
p2tilde <- dim(X2tilde)[2]#
p3tilde <- dim(X3tilde)[2]#
#
object.size(Xtilde)/1024^3#
#
###############################Time trials#
#######################Glmnet #
lambda <- NULL#
#lambda <- lambglmnet #
#system.time(fitglmnet <- glmnet(Xtilde,Ytilde, lambda = lambda, standardize = T, lambda.min.ratio = 0.001))#
#system.time(fitglmnet <- glmnet(X,as.vector(Y), standardize = TRUE, standardize.response=FALSE))#
system.time(fitglmnet <- glmnet(X,as.vector(Y), standardize = TRUE))#
betaglmnet <-fitglmnet$beta#
lambglmnet <- fitglmnet$lambda#
nlambda <- length(lambglmnet)
#######pgal#
lambda <- lambglmnet #rep(0, nlambda)#
system.time(fitglamlasso <- glamlasso(Ytilde,X1tilde,X2tilde,X3tilde,lambda = lambda, reltol= 1e-07,maxiter= 1000, penaltyfactor = rep(0,p)))#
betaalpgv6 <- fitalpgv6$Beta#
lambalpgv6 <- fitalpgv6$lambda#
Objalpgv6 <- fitalpgv6$Obj#
deltaalpgv6 <- fitalpgv6$delta#
iteralpgv6 <- fitalpgv6$Iter
#######pgal#
lambda <- lambglmnet #rep(0, nlambda)#
system.time(fitglamlasso <- glamlasso(Ytilde,X1tilde,X2tilde,X3tilde, family = "gaussian",#
lambda = lambda, reltol= 1e-07,maxiter= 1000, penaltyfactor = rep(0,p)))#
betaalpgv6 <- fitalpgv6$Beta#
lambalpgv6 <- fitalpgv6$lambda#
Objalpgv6 <- fitalpgv6$Obj#
deltaalpgv6 <- fitalpgv6$delta#
iteralpgv6 <- fitalpgv6$Iter
glamlasso
#######pgal#
lambda <- lambglmnet #rep(0, nlambda)#
system.time(fitglamlasso <- glamlasso(Ytilde,X1tilde,X2tilde,X3tilde, family = "gaussian",#
lambda = lambda, thresh= 1e-07,maxit= 1000, penaltyfactor = rep(0,p)))#
betaalpgv6 <- fitalpgv6$Beta#
lambalpgv6 <- fitalpgv6$lambda#
Objalpgv6 <- fitalpgv6$Obj#
deltaalpgv6 <- fitalpgv6$delta#
iteralpgv6 <- fitalpgv6$Iter
#######pgal#
lambda <- lambglmnet #rep(0, nlambda)#
system.time(fitglamlasso <- glamlasso(Ytilde,X1tilde,X2tilde,X3tilde, family = "gaussian",#
lambda = lambda, thresh= 1e-07,maxit= 1000, penalty.factor = rep(0,p)))#
betaalpgv6 <- fitalpgv6$Beta#
lambalpgv6 <- fitalpgv6$lambda#
Objalpgv6 <- fitalpgv6$Obj#
deltaalpgv6 <- fitalpgv6$delta#
iteralpgv6 <- fitalpgv6$Iter
betafitglamlasso <- fitglamlasso$Beta#
lambfitglamlasso <- fitglamlasso$lambda#
Objfitglamlasso <- fitglamlasso$Obj#
iterfitglamlasso <- fitglamlasso$Iter
modelno <- nlambda#
M<-max(glmnetbeta[,modelno], betafitglamlasso[,modelno])#
 plot(as.vector(B),type="l")#,ylim=c(0,M))#
 lines(betaglmnet[,modelno],col="green")#
 lines(betafitglamlasso[,modelno],col="red")
modelno <- nlambda#
M<-max(glmnetbeta[,modelno], betafitglamlasso[,modelno])#
 plot(beta,type="l")#,ylim=c(0,M))#
 lines(betaglmnet[,modelno],col="green")#
 lines(betafitglamlasso[,modelno],col="red")
##########arrange data with decreasing number of obs #
Ytilde <- aperm(Y,c(3,2,1))#
Xtilde <- kronecker(X1, kronecker(X2, X3))#
X1tilde <- X3#
X2tilde <- X2#
X3tilde <- X1#
#
n1tilde <- dim(X1tilde)[1]#
n2tilde <- dim(X2tilde)[1]#
n3tilde <- dim(X3tilde)[1]#
#
p1tilde <- dim(X1tilde)[2]#
p2tilde <- dim(X2tilde)[2]#
p3tilde <- dim(X3tilde)[2]#
#
object.size(Xtilde)/1024^3#
#
###############################Time trials#
#######################glmnet #
system.time(fitglmnet <- glmnet(Xtilde,c(Ytilde), standardize = FALSE))#
betaglmnet <-fitglmnet$beta#
lambglmnet <- fitglmnet$lambda#
nlambda <- length(lambglmnet)#
#
#######pgal#
lambda <- lambglmnet #rep(0, nlambda)#
system.time(fitglamlasso <- glamlasso(Ytilde,X1tilde,X2tilde,X3tilde, family = "gaussian",#
lambda = lambda, thresh= 1e-07,maxit= 1000, penalty.factor = rep(0,p)))#
betafitglamlasso <- fitglamlasso$Beta#
lambfitglamlasso <- fitglamlasso$lambda#
Objfitglamlasso <- fitglamlasso$Obj#
iterfitglamlasso <- fitglamlasso$Iter#
#
################################Estimates#
modelno <- nlambda#
M<-max(glmnetbeta[,modelno], betafitglamlasso[,modelno])#
 plot(beta,type="l")#,ylim=c(0,M))#
 lines(betaglmnet[,modelno],col="green")#
 lines(betafitglamlasso[,modelno],col="red")
modelno <- nlambda#
M<-max(betaglmnet[,modelno], betafitglamlasso[,modelno])#
 plot(beta,type="l")#,ylim=c(0,M))#
 lines(betaglmnet[,modelno],col="green")#
 lines(betafitglamlasso[,modelno],col="red")
modelno <- nlambda#
M<-max(betaglmnet[,modelno], betafitglamlasso[,modelno])#
 plot(beta,type="l")#,ylim=c(0,M))#
 lines(betaglmnet[,modelno],col="green")
lines(betafitglamlasso[,modelno],col="red")
##########arrange data with decreasing number of obs #
Ytilde <- aperm(Y,c(1,2,3))#
Xtilde <- kronecker(X3, kronecker(X2, X1))#
X1tilde <- X1#
X2tilde <- X2#
X3tilde <- X3#
#
n1tilde <- dim(X1tilde)[1]#
n2tilde <- dim(X2tilde)[1]#
n3tilde <- dim(X3tilde)[1]#
#
p1tilde <- dim(X1tilde)[2]#
p2tilde <- dim(X2tilde)[2]#
p3tilde <- dim(X3tilde)[2]#
#
object.size(Xtilde)/1024^3#
#
###############################Time trials#
#######################glmnet #
system.time(fitglmnet <- glmnet(Xtilde,c(Ytilde), standardize = FALSE))#
betaglmnet <-fitglmnet$beta#
lambglmnet <- fitglmnet$lambda#
nlambda <- length(lambglmnet)#
#
#######pgal#
lambda <- lambglmnet #rep(0, nlambda)#
system.time(fitglamlasso <- glamlasso(Ytilde,X1tilde,X2tilde,X3tilde, family = "gaussian",#
lambda = lambda, thresh= 1e-07,maxit= 1000, penalty.factor = rep(0,p)))#
betafitglamlasso <- fitglamlasso$Beta#
lambfitglamlasso <- fitglamlasso$lambda#
Objfitglamlasso <- fitglamlasso$Obj#
iterfitglamlasso <- fitglamlasso$Iter#
#
################################Estimates#
modelno <- nlambda#
M<-max(betaglmnet[,modelno], betafitglamlasso[,modelno])#
 plot(beta,type="l")#,ylim=c(0,M))#
 lines(betaglmnet[,modelno],col="green")#
 lines(betafitglamlasso[,modelno],col="red")
#######pgal#
lambda <- lambglmnet #rep(0, nlambda)#
system.time(fitglamlasso <- glamlasso(Ytilde,X1tilde,X2tilde,X3tilde, family = "cox",#
lambda = lambda, thresh= 1e-07,maxit= 1000, penalty.factor = rep(0,p)))#
betafitglamlasso <- fitglamlasso$Beta#
lambfitglamlasso <- fitglamlasso$lambda#
Objfitglamlasso <- fitglamlasso$Obj#
iterfitglamlasso <- fitglamlasso$Iter
glamlasso
glmnet
glamlasso(matrix(Ytilde,  n1tilde, n2tilde * n3tilde), matrix(Sizetilde,  n1tilde, n2tilde * n3tilde),  X1tilde, X2tilde, X3tilde,lambda = lambda, nu = 1,reltolprox= 1e-05,reltolnewt= 1e-04, maxiterprox= 1000, maxiternewt = 25, penaltyfactor = rep(0,p))
glamlasso(matrix(Ytilde,  n1tilde, n2tilde * n3tilde), matrix(Sizetilde,  n1tilde, n2tilde * n3tilde),  X1tilde, X2tilde, X3tilde,lambda = lambda, reltolprox= 1e-05,reltolnewt= 1e-04, maxiterprox= 1000, maxiternewt = 25, penaltyfactor = rep(0,p))
